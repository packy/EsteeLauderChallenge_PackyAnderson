#!/usr/bin/env perl
use strict;
use warnings;
use 5.010;

use lib::relative '../lib';
use DataSF::MobileFoodFacility;

use Getopt::Long;
use Pod::Usage;
use List::Util qw( max );
my %args;
my $distance;
my $latitude;
my $longitude;
my $food;
my $man = 0;
my $help = 0;

GetOptions(
  'any'          => sub { $args{status} = 'ANY' },
  'active'       => sub { $args{status} = 'APPROVED' },
  'approved'     => sub { $args{status} = 'APPROVED' },
  'expired'      => sub { $args{status} = 'EXPIRED' },
  'requested'    => sub { $args{status} = 'REQUESTED' },
  'suspended'    => sub { $args{status} = 'SUSPEND' },
  'food_items=s' => \$food,
  'distance=s'   => \$distance,
  'latitude=s'   => \$latitude,
  'longitude=s'  => \$longitude,
  'help|?'       => \$help,
  'man'          => \$man
) or pod2usage(2);
pod2usage(-sections => 'SYNOPSIS') if $help;
pod2usage(-exitval => 0, -verbose => 2) if $man;

if (defined $distance || defined $latitude || defined $longitude) {
  if (! defined $distance) {
    die "You must specify --distance, --latitude, and --longitude "
      . "to be able to locate food trucks by distance\n";
  }
  $args{distance}  = $distance;
  $args{latitude}  = $latitude;
  $args{longitude} = $longitude;
}
if (defined $food) {
  $args{food_items} = $food;
}

my $trucks = DataSF::MobileFoodFacility->new();
my @results = $trucks->filter( %args );

# format the output
my @col_widths = (4, 7, 10);
foreach my $result ( @results ) {
  $col_widths[0] = max($col_widths[0], length($result->Applicant));
  $col_widths[1] = max($col_widths[1], length($result->Address));
  $col_widths[2] = max($col_widths[2], length($result->FoodItems));
}
if (defined $distance) {
  printf " %*s | %*s | %*s | Distance \n",
    $col_widths[0] * -1, 'Name',
    $col_widths[1] * -1, 'Address',
    $col_widths[2] * -1, 'Food Items';
  printf "%s+%s+%s+%s\n",
    '-' x ($col_widths[0] + 2),
    '-' x ($col_widths[1] + 2),
    '-' x ($col_widths[2] + 2),
    '-' x 10;
  foreach my $result ( @results ) {
    printf " %*s | %*s | %*s | %.0fm\n",
      $col_widths[0] * -1, $result->Applicant,
      $col_widths[1] * -1, $result->Address,
      $col_widths[2] * -1, $result->FoodItems,
      $result->Distance;
  }
}
else {
  printf " %*s | %*s | %*s\n",
    $col_widths[0] * -1, 'Name',
    $col_widths[1] * -1, 'Address',
    $col_widths[2] * -1, 'Food Items';
  printf "%s+%s+%s\n",
    '-' x ($col_widths[0] + 2),
    '-' x ($col_widths[1] + 2),
    '-' x ($col_widths[2] + 2);
  foreach my $result ( @results ) {
    printf " %*s | %*s | %*s\n",
      $col_widths[0] * -1, $result->Applicant,
      $col_widths[1] * -1, $result->Address,
      $col_widths[2] * -1, $result->FoodItems;
  }
}

__END__
 
=head1 NAME

B<foodtruck> - list out food trucks in San Francisco

=head1 SYNOPSIS

foodtruck [options]

  Options:
    --food_items  Specify a string to search for in the food item field

    --distance    Specify a distance in meters. Requires --latitude
                  and --longitude
    --latitude    Specify a latitude for a location to calculate distance
    --longitude   Specify a longitude for a location to calculate distance

    --any         Show food trucks regardless of permit status
    --active      (default) Show only trucks with approved permits
    --approved    Show only trucks with approved permits
    --expired     Show only trucks with expired permits
    --requested   Show only trucks with requested permits
    --suspended   Show only trucks with suspended permits

    --help        Show a brief help message
    --man         Show the entire man page

=head1 OPTIONS
 
=over 8

=item B<--food_items>

Filter the results by matching the given string against the FoodItems
field in the dataset. The string will be matched as a regular expression.

=item B<--distance>

=item B<--latitude>

=item B<--longitude>

Specify a limit for how far the food truck can be from a given location.
All three parameters, B<--distance>, B<--latitude>, and B<--longitude>
must be specified.

=item B<--active> (default)

=item B<--approved>

=item B<--expired>

=item B<--requested>

=item B<--suspended>

=item B<--any>

Filter the results based on the Status field in the dataset. The statuses are

    * APPROVED
    * EXPIRED
    * REQUESTED
    * SUSPENDED

The option B<--active> is provided as an alias to the status "APPROVED", and
is the default if no status is specified. The option B<--any> will disable
filtering based on the Status field.

=item B<--help>
 
Print a brief help message and exits.
 
=item B<--man>
 
Prints the manual page and exits.
 
=back
 
=head1 DESCRIPTION
 
B<foodtruck> is a quick and dirty script for listing out mobile food
facilities using the data from San Francisco's food truck open dataset.

=cut